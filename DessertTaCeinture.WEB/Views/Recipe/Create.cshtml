@model DessertTaCeinture.WEB.Models.Recipe.RecipeViewModel

@{
    ViewBag.Title = "Nouvelle recette";

    List<SelectListItem> share = new List<SelectListItem>();
    share.Add(new SelectListItem { Text = "Oui", Value = true.ToString() });
    share.Add(new SelectListItem { Text = "Non", Value = false.ToString() });

    List<SelectListItem> origins = new List<SelectListItem>();
    foreach (var origin in Model.Origins) { origins.Add(new SelectListItem { Text = origin.Country, Value = origin.Id.ToString() }); }

    List<SelectListItem> themes = new List<SelectListItem>();
    foreach (var theme in Model.Themes) { themes.Add(new SelectListItem { Text = theme.Name, Value = theme.Id.ToString() }); }

    List<SelectListItem> categories = new List<SelectListItem>();
    foreach (var cat in Model.Categories) { categories.Add(new SelectListItem { Text = cat.Name, Value = cat.Id.ToString() }); }
}

<script type="text/javascript">

    var currentIngredientIndex = 0;
    var currentStepIndex = 0;

    function AddRow(type) {
        switch (type) {
            case 'ingredient':
                $.ajax({
                    async: false,
                    type: "GET",
                    url: '/Recipe_Ingredient/CreateField?index=' + currentIngredientIndex
                }).success(function (partialView) {
                    $('#RecipeIngredientsSection').append(partialView);
                    });
                currentIngredientIndex++;
                break;
            case 'step':
                $.ajax({
                    async: false,
                    type: "GET",
                    url: '/Step/CreateField?index=' + currentStepIndex
                }).success(function (partialView) {
                    $('#RecipeStepsSection').append(partialView);
                    });
                currentStepIndex++;
                break
        }
        
    }

    function DelRow(type) {
        var rows = null;
        switch (type) {
            case 'ingredient':
                rows = document.querySelectorAll(".ingredientRow");
                if (rows.length > 1 && currentIngredientIndex > 0) {
                    rows[rows.length - 1].remove();
                    currentIngredientIndex--;
                }
                break;
            case 'step':
                rows = document.querySelectorAll(".stepRow");
                if (rows.length > 1 && currentIngredientIndex > 0) {
                    rows[rows.length - 1].remove();
                    currentStepIndex--;
                }
                break;
        }
        
    }

    function disallowNegativeNumber(e) {
        var charCode = (e.which) ? e.which : event.keyCode
        if (charCode == 45) {
            return false;
        }
        return true;
    }
</script>

@using (Html.BeginForm("Create", "Recipe", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div id="page">
        <header id="gtco-header" class="gtco-cover gtco-cover-sm" role="banner" style="height:300px;">
            <div class="overlay"></div>
            <div class="gtco-container">
                <div class="row">
                    <div class="col-md-12 col-md-offset-0">
                        <div class="row row-mt-15em">
                            <div style="margin-top:-75px;">
                                <div class="col-md-7 mt-text animate-box" data-animate-effect="fadeInUp" style="margin-top:0;">
                                    <h1 class="cursive-font">Nouvelle recette</h1>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <div class="gtco-section">
            <div class="gtco-container">
                <div class="row">
                    <div class="col-md-12">
                        <div class="row">
                            <div class="col-md-12 animate-box">
                                <div class="form-wrap">
                                    <div class="tab">
                                        <div class="tab-content" style="border: 2px dashed #FBB448; padding: 25px 25px 100px 25px">
                                            @Html.AntiForgeryToken()

                                            <div class="form-horizontal">
                                                <h3 class="cursive-font">Détails</h3>
                                                <hr />
                                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                                <div class="form-group" id="formDetail">
                                                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-8">
                                                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                                                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.OriginId, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(model => model.OriginId, origins, string.Empty, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.OriginId, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(model => model.CategoryId, categories, string.Empty, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ThemeId, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(model => model.ThemeId, themes, string.Empty, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.ThemeId, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Picture, htmlAttributes: new { @class = "control-label col-md-2", @for = "fileUpload", @id = "label-file" })
                                                    <div class="col-md-10">
                                                        <input type="file" id="fileUpload" name="fileUpload" size="25" />
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.IsPublic, "Publier", htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(model => model.IsPublic, share, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.IsPublic, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="form-horizontal">
                                                <h3 class="cursive-font">Ingrédients</h3>
                                                <hr />
                                                <div class="row" id="RecipeIngredientsSection">
                                                </div>

                                                <div class="col-md-8 col-md-offset-4">
                                                    <div class="col-md-3">
                                                        <input id="addIngredient" type="button" class="btn btn-primary-invert btn-block" onclick="AddRow('ingredient')" value="+" />
                                                    </div>
                                                    <div class="col-md-3">
                                                        <input id="delIngredient" type="button" class="btn btn-primary-invert btn-block" onclick="DelRow('ingredient')" value="-" />
                                                    </div>
                                                </div>
                                                <br />
                                                <br />
                                            </div>

                                            <div class="form-horizontal">
                                                <h3 class="cursive-font">Etapes</h3>
                                                <hr />
                                                <div class="row" id="RecipeStepsSection">
                                                </div>
                                                <br />
                                                <div class="col-md-8 col-md-offset-2">
                                                    <div class="col-md-6">
                                                        <input id="addStep" type="button" class="btn btn-primary-invert btn-block" onclick="AddRow('step')" value="Ajouter une étape" />
                                                    </div>
                                                    <div class="col-md-6">
                                                        <input id="delStep" type="button" class="btn btn-primary-invert btn-block" onclick="DelRow('step')" value="Supprimer la dernière étape" />
                                                    </div>
                                                </div>
                                                <br />
                                                <br />
                                                <hr />
                                            </div>

                                            <div class="form-horizontal">
                                                <div class="col-md-8 col-md-offset-8">
                                                    <div class="col-md-3">
                                                        <input type="submit" class="btn btn-primary btn-block" value="Enregistrer">
                                                    </div>
                                                    <div class="col-md-3">
                                                        @Html.ActionLink("Annuler", "Index", "Recipe", null, new { @class= "btn btn-primary btn-block" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}