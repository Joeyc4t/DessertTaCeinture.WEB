@model DessertTaCeinture.WEB.Models.Recipe.CreateRecipeModel

@{
    ViewBag.Title = "Nouvelle recette";
    Layout = "~/Views/Shared/_Layout.cshtml";

    List<SelectListItem> share = new List<SelectListItem>();
    share.Add(new SelectListItem { Text = "Oui", Value = true.ToString() });
    share.Add(new SelectListItem { Text = "Non", Value = false.ToString() });

    List<SelectListItem> origins = new List<SelectListItem>();
    foreach (var origin in Model.Origins) { origins.Add(new SelectListItem { Text = origin.Country, Value = origin.Id.ToString() }); }

    List<SelectListItem> themes = new List<SelectListItem>();
    foreach(var theme in Model.Themes) { themes.Add(new SelectListItem { Text = theme.Name, Value = theme.Id.ToString() }); }

    List<SelectListItem> categories = new List<SelectListItem>();
    foreach(var cat in Model.Categories) { categories.Add(new SelectListItem { Text = cat.Name, Value = cat.Id.ToString() }); }

    List<SelectListItem> ingredients = new List<SelectListItem>();
    foreach (var ingredient in Model.Ingredients) { ingredients.Add(new SelectListItem { Text = ingredient.Name, Value = ingredient.Id.ToString() }); }

    List<SelectListItem> units = new List<SelectListItem>();
    units.Add(new SelectListItem { Text = "mg", Value = "mg" });
    units.Add(new SelectListItem { Text = "g", Value = "g" });
    units.Add(new SelectListItem { Text = "kg", Value = "kg" });
    units.Add(new SelectListItem { Text = "ml", Value = "ml" });
    units.Add(new SelectListItem { Text = "cl", Value = "cl" });
    units.Add(new SelectListItem { Text = "l", Value = "l" });
}
<script>
    function addRow() {
        //var dpList = document.getElementById("selectedIngredient");

        //var ingredient = dpList.options[dpList.selectedIndex].text;
        //var qty = document.getElementById("Quantity").value;
        //var unit = document.getElementById("selectedUnit").value;
                
        //var node = document.createElement("li");
        //var textnode = document.createTextNode(ingredient + " " + qty + " " + unit);
        //node.appendChild(textnode);
        //document.getElementById("ingredientsList").appendChild(node);
    }
</script>
@using (Html.BeginForm("Create", "Recipe", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="gtco-loader"></div>
    <div id="page">
        <header id="gtco-header" class="gtco-cover gtco-cover-md" role="banner" style="background-image: url(../../Content/images/backgrounds/img_bg_3.jpg)" data-stellar-background-ratio="0.5">
            <div class="overlay"></div>
            <div class="gtco-container">
                <div class="row">
                    <div class="col-md-12">
                        <div class="row row-mt-15em">
                            <div class="col-md-12 animate-box">
                                <div class="form-wrap">
                                    <div class="tab">
                                        <div class="tab-content">
                                            @Html.AntiForgeryToken()
                                            <div class="form-horizontal">
                                                <h3 class="cursive-font">Nouvelles recettes</h3>
                                                <hr />
                                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-8">
                                                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                                                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.OriginId, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(model => model.OriginId, origins, string.Empty, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.OriginId, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(model => model.CategoryId, categories, string.Empty, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ThemeId, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(model => model.ThemeId, themes, string.Empty, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.ThemeId, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.IsPublic, "Publier", htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(model => model.IsPublic, share, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.IsPublic, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <div class="gtco-section">
            <div class="gtco-container">
                <div class="row">
                    <div class="col-md-8 col-md-offset-2 text-center gtco-heading">
                        <h2 class="cursive-font primary-color">Ingrédients</h2>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-12">

                        @*Ingredient menu*@
                        <div class="form-horizontal">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.RecipeIngredient.IngredientId, ingredients, string.Empty, htmlAttributes: new { @class = "form-control", id = "selectedIngredient" })
                                </div>
                                <div class="col-md-2">
                                    @Html.EditorFor(model => model.RecipeIngredient.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                <div class="col-md-2">
                                    @Html.DropDownListFor(model => model.RecipeIngredient.Unit, units, string.Empty, htmlAttributes: new { @class = "form-control", id = "selectedUnit" })
                                </div>
                                <div class="col-md-1">
                                    <input id="addIngredient" type="button" class="btn btn-primary btn-block" value="+" onclick="addRow()" style="width: 75px;" />
                                </div>
                                <div class="col-md-1">
                                    <input id="delIngredient" type="button" class="btn btn-primary btn-block" value="-" onclick="delRow()" style="width: 75px;" />
                                </div>
                            </div>
                        </div>
                        @*/Ingredient menu*@

                    </div>
                    <div class="col-md-12 col-md-offset-4">
                        <ul id="ingredientsList"></ul>
                    </div>
                </div>
            </div>

            <div class="gtco-container">
                <div class="col-md-4 col-md-offset-2">
                    <input type="submit" class="btn btn-primary btn-block" value="Enregistrer">
                </div>
                <div class="col-md-4 col-md-offset-2">
                    <p>@Html.ActionLink("Annuler", "Details", "User")</p>
                </div>
            </div>
        </div>
    </div>
}
